initialize() {
	defineConstant("PopSize", 1e4); // population size
	defineConstant("L", 5e7); // chromosome length
	//defineConstant("Modifier_posi", 25e6); // modifier position
	defineConstant("Modifier_iniFreq", 0.1); // modifier initial frequency
	defineConstant("teInitialCount", 1); // initial number of TEs
	defineConstant("a", 0.02);
	
	defineConstant("u", 0.01); // TE jump probability
	defineConstant("k", 0.2); // silencing efficiency 	
	defineConstant("s", -0.001);
	defineConstant("b", 0);
	
	defineConstant("Ectopic_Rec_rate", 1e-3);

	defineConstant("r", 1e-6);
	initializeRecombinationRate(r);
	
		// set up our chromosome: 10 QTLs, surrounded by neutral regions
defineConstant("C", 1); // number of QTLs
defineConstant("distance", asInteger(L/(C+1)));
defineConstant("EffectSize", 0.5);//0.5 for enhancing alleles, -0.5 for weakening alleles
pos = 0;
q = NULL;
for (i in 1:C)
{
pos = pos + distance;
q = c(q, pos);
}
defineConstant("Q", q); // remember our QTL positions
	
	
	initializeMutationRate(0);

	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	// uniform chromosome of length 100 kb with uniform recombination
	initializeGenomicElement(g1, 0, L-1);
		initializeSex("A");
	
	// transposon mutation type; 
initializeMutationType("m2", 0.5, "f", 0.0);
m2.convertToSubstitution = F;

initializeMutationType("m3", 0.5, "f", 0.0); // modifier allele domimance and fitness effect
m3.convertToSubstitution = F;
}

// create a population
1 late(){
sim.outputFull("/dfs7/grylee/yuhenh3/TE_simulations/tmp/FullOutput_5000_additive_ectopic_recombination"+s+"_"+b+"_"+u+"_"+k+"_"+r+"_"+".txt");

	sim.tag = 0; // the next unique tag value to use for TEs
// create some transposons at random positions
genomes = sim.subpopulations.genomes;
	for (q in Q)
	{
sample(p1.genomes, asInteger(2*PopSize*Modifier_iniFreq)).addNewDrawnMutation(m3, q);
}

for (individual in sim.subpopulations.individuals)
{
muts = individual.genomes.mutationsOfType(m2);
TE_num = muts.size();
for (te in muts)
{
te.setValue("M",rpois(1, a*TE_num));
}
}
}


fitnessEffect() {
ectopic_rec1=0.0;
ectopic_rec2=0.0;
te_num_NoEpi=0;
AdditiveSelectionCoeff=0.0;
tes = individual.genomes.mutationsOfType(m2);
teCount = tes.size();

if (teCount>0)
{
for (te in tes)
{
slience_mag=te.getValue("M");
if (slience_mag < 5)//remove this if condition when TE silencing not suppresses ectopic recombination
{
te_num_NoEpi=te_num_NoEpi+1;
}
AdditiveSelectionCoeff = AdditiveSelectionCoeff-s*(1+slience_mag*b);
}
}
w_base = 1.0 + AdditiveSelectionCoeff;

tes = individual.genomes[0].mutationsOfType(m2);
for (te in tes)
{
slience_mag=te.getValue("M");
if (slience_mag < 5) //remove this if condition when TE silencing not suppresses ectopic recombination
{
focalPosition = te.position;
alter_tes = individual.genomes[1].mutationsOfType(m2);
alterPositions = alter_tes.position;
if (sum(match(focalPosition, alterPositions) >= 0))
{
}
else
{
ectopic_rec1 = rbinom(1, 1, Ectopic_Rec_rate * (te_num_NoEpi-1));
}
}
}

tes = individual.genomes[1].mutationsOfType(m2);
for (te in tes)
{
slience_mag=te.getValue("M");
if (slience_mag < 5) //remove this if condition when TE silencing not suppresses ectopic recombination
{
focalPosition = te.position;
alter_tes = individual.genomes[0].mutationsOfType(m2);
alterPositions = alter_tes.position;
if (sum(match(focalPosition, alterPositions) >= 0))
{
}
else
{
ectopic_rec2 = rbinom(1, 1, Ectopic_Rec_rate * (te_num_NoEpi-1));
}
}
}

w = w_base*(1-ectopic_rec1)*(1-ectopic_rec2);
if (w > 0.0)
{
return w;
}
else
{
return 0.0;
}
}

1002:10002 early() {
meanFitness = mean(p1.cachedFitness(NULL));
line = paste(sim.cycle,meanFitness,"mean_fitness", replicat);
file=paste("/dfs7/grylee/yuhenh3/TE_simulations/invade_enhancing_Magnitude_TE_additive_with_ectopci_recombination",s,b,u,k,r,sep = "_");
writeFile(file, line, append=T);
}


1000:10001 late() {
inds = sim.subpopulations.individuals;
additive = inds.countOfMutationsOfType(m2);
mean_A = mean(additive);
V_A = sd(additive)^2;

ind_count=0;ind_mag=0;
for (individual in inds)
{
avg_mag=individual.getValue("phenotype");
if (isFloat(avg_mag))
{
ind_mag=ind_mag+avg_mag;
ind_count=ind_count+1;
}
}
M_mean=ind_mag/ind_count;

ls = sim.mutationsOfType(m2);
TE_freq = sim.mutationFrequencies(NULL, ls);
TE_Freq_mean = mean(TE_freq);

qtls = sim.mutationsOfType(m3);
f = sim.mutationFrequencies(NULL, qtls);

line1 = paste(sim.cycle,mean_A, V_A, TE_Freq_mean, replicat);
line2 = paste(sim.cycle, M_mean, f, "modifier_Freq",replicat);
file=paste("/dfs7/grylee/yuhenh3/TE_simulations/invade_enhancing_Magnitude_TE_additive_with_ectopci_recombination",s,b,u,k,r,sep = "_");
writeFile(file, line1, append=T);
writeFile(file, line2, append=T);
}



late() {
// make active transposons copy themselves with rate teJumpP
for (individual in sim.subpopulations.individuals)
{
for (genome in individual.genomes)
{
tes = genome.mutationsOfType(m2);
for (te in tes)
{
//teCount = tes.size();
te_sliencing = te.getValue("M");
//te_sliencing = te.tag;
if (te_sliencing*k<1)
{
jumpCount = rpois(1, teJumpP*(1-te_sliencing*k));

if (jumpCount>0)
{
// make a new TE mutation
pos = rdunif(1, 0, L-1);
jumpTE = genome.addNewDrawnMutation(m2, pos);
//jumpTE.tag = sim.tag;
//sim.tag = sim.tag + 1;
jumpTE.setValue("M",0);
}
}
}
}
muts = individual.genomes.mutationsOfType(m2);
phenotype = size(muts) ? mean(muts.getValue("M")) else NULL;
individual.setValue("phenotype",phenotype);
}
}

modifyChild() {
H = (child.genome1.countOfMutationsOfType(m3)+child.genome2.countOfMutationsOfType(m3))/2;
a_pi = a*(1+EffectSize*H);

TE_num = child.genome1.countOfMutationsOfType(m2)+child.genome2.countOfMutationsOfType(m2);

for (genome in child.genomes)
{
tes = genome.mutationsOfType(m2);
for (te in tes)
{
te.setValue("M",rpois(1, a_pi*TE_num));
}
}
return T;
}

